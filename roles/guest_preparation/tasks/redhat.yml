- name: Kill any stuck instances of yum-cron
  ansible.builtin.shell: "pkill yum-cron --oldest --echo"
  ignore_errors: true

- name: Install open-vm-tools on source VM
  ansible.builtin.package:
    name: open-vm-tools
    state: latest

## These are a few ugly shell commands, I'd like to move these to a more proper ansible fashion
## For this shell command specifically, I can't use copy due to the env vars, afaik. Could probably
## pull that from the facts??
- name: Backup existing initramfs
  ansible.builtin.shell: cp /boot/initramfs-$(uname -r).img /boot/initramfs-$(uname -r).img-old

- name: Reconfigure initramfs to support VMWare Paravirtual + LSILogic controllers
  ansible.builtin.shell: dracut  -f -v --add-drivers "mptspi scsi_transport_spi mptsas mptscsih mptbase scsi_transport_sas vmw_pvscsi" /boot/initramfs-$(uname -r).img $(uname -r)

## Not gonna lie, this is pretty jank/lazy. On every attempt, the source VMs main interface was eth0,
## and the target ended up having ens192. Sooooo, we just copy the config, and change the target
## interface name. This only sets up the first NIC, additional NICs will need someone to manually
## perform that process.
#
## The mapping between eth0 and ens192 seems to be:
##
## ens = 160 + (32 * ((eth+1) mod 4)) + floor((eth+1) / 4)
##
## [ in python: ens = 160 + (32 * ((eth+1) % 4)) + ((enth+1) // 4) ]
##
## that is, starting at 160, add 32 for each subsequent interface, but when you pass 256,
## start over, adding one to the previous starting point, but also skip the very first one
#
## In host facts, interfaces are listed in the array .interfaces
## Interface details are in .[(.interfaces[N] | regex_replace('-','_'))] with MAC address at .macaddress

- name: Compile OS NICs
  set_fact:
    guest_nics: "{{ (guest_nics | default([])) + [ { 'guest_dev': item, 'mac': (ansible_facts[(item | regex_replace('-','_'))].macaddress | default('')) } ] }}"
  loop: "{{ ansible_facts.interfaces }}"

- name: For each interface
  block:
    - name: Calculate new device name, step 1
      set_fact:
        oldnicindex: "{{ (oldnic.guest_dev | regex_search('\d+$')) }}"

    - name: Calculate new device name, step 2
      set_fact:
        newdev: "ens{{ 160 + (32 * ((oldnicindex+1) % 4)) + ((oldnicindex+1) // 4) }}"

    - name: Copy existing network configuration
      ansible.builtin.copy:
        remote_src: yes
        src: "/etc/sysconfig/network-scripts/ifcfg-{{ oldnic.guest_dev }}"
        dest: "/etc/sysconfig/network-scripts/ifcfg-{{ newdev }}"

    ## inb4 Bitt roasts me for not using an actual RegEx here
    - name: Update network adapter name in new configuration
      ansible.builtin.replace:
        path: "/etc/sysconfig/network-scripts/ifcfg-{{ newdev }}"
        regexp: "{{ oldnic.guest_dev }}"
        replace: "{{ newdev }}"

    - name: Make sure the interface configuration doesn't have a hard-coded HWADDR
      ansible.builtin.lineinfile:
        path: "/etc/sysconfig/network-scripts/ifcfg-{{ newdev }}"
        state: absent
        regexp: '^HWADDR=\S{17}'

    - name: Remove uuid lines from ifcfg-ens192
      ansible.builtin.lineinfile:
        path: "/etc/sysconfig/network-scripts/ifcfg-{{ newdev }}"
        state: absent
        regexp: '^UUID=.*$'

  loop: "{{ guest_nics }}"
  loop_control:
    loop_var: oldnic
    label: "{{ oldnic.guest_dev }}"

## Modify the sssd dyndns_iface variable
- name: Backup existing sssd configuration
  ansible.builtin.copy:
    remote_src: yes
    src: /etc/sssd/sssd.conf
    dest: /etc/sssd/sssd.conf.bkp

- name: Update network adapter name in new configuration
  ansible.builtin.replace:
    path: /etc/sssd/sssd.conf
    regexp: "dyndns_iface = eth0"
    replace: "dyndns_iface = ens192"


## Wipe learned python env so that AWX doesn't fail
- name: Clear gathered facts
  meta: clear_facts
